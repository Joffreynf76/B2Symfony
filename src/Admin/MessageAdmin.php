<?php


namespace App\Admin;


use App\Entity\Message;
use App\Entity\Users;
use App\Form\DataTransformer\SenderToUsersTransformer;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\OptionsResolver\OptionsResolver;

class MessageAdmin extends AbstractAdmin
{
    public $supportsPreviewMode = true;
    private $transformer;

    public function __construct(string $code, string $class, string $baseControllerName, SenderToUsersTransformer $transformer)
    {
        parent::__construct($code, $class, $baseControllerName);
        $this->transformer = $transformer;
    }

    protected function configureFormFields(FormMapper $form)
    {
        parent::configureFormFields($form); // TODO: Change the autogenerated stub
        $user = $this->getConfigurationPool()->getContainer()->get('security.token_storage')->getToken()->getUser();
        $id = $user->getId();
        $form->add('object',TextType::class);
        $form->add('content',TextareaType::class);
        $form->add('date',DateType::class,[
            'years'=>['2019','2020','2021','2022']

        ]);
        $form->add('sender',HiddenType::class, [
            'data'=>$id
        ]);
        $form->get('sender')->addModelTransformer($this->transformer);
        $form->add('receiver',EntityType::class, [
            'class'=> Users::class,
            'choice_label' => 'email',
            'placeholder'=>'Choisissez un destinataire'
        ]);


    }

    protected function configureListFields(ListMapper $list)
    {
        parent::configureListFields($list); // TODO: Change the autogenerated stub
        $list->addIdentifier('object');
        $list->add('receiver.email');
        $list->add('date');
    }

    protected function configureDatagridFilters(DatagridMapper $filter)
    {
        parent::configureDatagridFilters($filter); // TODO: Change the autogenerated stub

        $filter->add('date');
        $filter->add('receiver.email');
        $filter->add('object');
    }

    public function toString($object)
    {
        return $object instanceof Message
            ? $object->getObject()
            : 'Objet';
    }

    public function configureOptions(OptionsResolver $optionsResolver)
    {
        $optionsResolver->setDefaults([
            'data_class'=>Users::class
        ]);
    }

    public function createQuery($context = 'list')
    {
        $user = $this->getConfigurationPool()->getContainer()->get('security.token_storage')->getToken()->getUser();
        $id = $user->getId();
        $query = parent::createQuery($context);
        $query->andWhere(
            $query->expr()->eq($query->getRootAliases()[0] . '.sender', ':my_param')
        );
        $query->setParameter('my_param', $id);
        return $query;
    }

}